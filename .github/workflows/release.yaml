name: Release & Changelog

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  # -------------------
  # 1. Update CHANGELOG.md on merge to main
  # -------------------
  update-changelog:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get last tag
        id: last_tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 --match 'v[0-9]*.[0-9]*.[0-9]*' || echo '')" >> $GITHUB_OUTPUT

      - name: Generate CHANGELOG (preserve Unreleased)
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fromTag: ${{ steps.last_tag.outputs.tag }}
          toTag: HEAD
          writeToFile: true
          changelogFilePath: CHANGELOG.md
          includeRefIssues: true
          useGitmojis: true
          includeInvalidCommits: false
          reverseOrder: false
          templatePath: .github/changelog-templates/keep-unreleased.hbs

      - name: Commit updated CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md [skip ci]'
          file_pattern: CHANGELOG.md

  # -------------------
  # 2. Create GitHub Release on tag push
  # -------------------
  create-release:
    if: startsWith(github.ref_name, 'v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract changelog section for this release
        id: changelog_section
        run: |
          VERSION="${GITHUB_REF_NAME}"
          awk "/## \\[?${VERSION}\\]?/,/^## /" CHANGELOG.md | sed '$d' > RELEASE_BODY.md
          if ! test -s RELEASE_BODY.md; then
            echo "ERROR: Changelog section for version ${VERSION} not found in CHANGELOG.md."
            exit 1
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          bodyFile: RELEASE_BODY.md
          token: ${{ secrets.GITHUB_TOKEN }}

  # -------------------
  # 3. Upload release to PyPI
  # -------------------
  upload-pypi:
    if: startsWith(github.ref_name, 'v')
    runs-on: ubuntu-latest
    needs: create-release
    environment:
      name: pypi
      url: https://pypi.org/p/scatlastb-utils
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: pyproject.toml

      - name: Build package
        run: uv build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
